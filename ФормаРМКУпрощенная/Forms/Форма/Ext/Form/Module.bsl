&НаКлиенте
Функция СформироватьПараметрыЧекаПечати()
	всеПараметрыЧека = Новый Структура;
	всеПараметрыЧека.Вставить("ТипЧека", ?(Объект.РеквизитЧекПродажи, "ПРИХОД", "ВОЗВРАТ"));
	всеПараметрыЧека.Вставить("ФирмаНазвание", Объект.РеквизитФирма);
	//всеПараметрыЧека.Вставить("ИННФирмы", Объект.РеквизитФирма.ИНН);
	всеПараметрыЧека.Вставить("Кассир", Объект.РеквизитКассир);
	
	СуммаЧека = 0;
	для Каждого стрПозиции из Объект.Товары цикл
		СуммаЧека  = СуммаЧека + стрПозиции.Сумма;
	конецЦикла;			
	
	всеПараметрыЧека.Вставить("НомерЧека", "");
	всеПараметрыЧека.Вставить("НомерСмены", "");
	всеПараметрыЧека.Вставить("ДатаИВремяЧека", СокрЛП(ТекущаяДата()));
	всеПараметрыЧека.Вставить("СуммаЧека", СуммаЧека);
	всеПараметрыЧека.Вставить("РегНомерККТ", "");
	всеПараметрыЧека.Вставить("НомерФН", "");
	всеПараметрыЧека.Вставить("ФискалПризнак", "");	
	
	ТипЧекаВQRКоде= "1";
	Если НЕ Объект.РеквизитЧекПродажи тогда
		ТипЧекаВQRКоде = "2";
	конецЕсли;
	СтрокаQRКода = "";
	
	//всеПараметрыЧека.Вставить("СтрокаQRКода", СтрокаQRКода);
	//Если чекЗадание.Свойство("taxationType") тогда
	//	всеПараметрыЧека.Вставить("СистемаНалогообложения", ПечатьЧекаККТКлиент.ПолучитьПереводСистемыНалогообложения(чекЗадание.taxationType));
	//конецЕсли;               
	всеПараметрыЧека.Вставить("ТаблицаОплат", Новый Структура);
	текТаблицаОплат = всеПараметрыЧека.ТаблицаОплат;                                              
	Если РеквизитТипОплаты = "Безналичными" тогда
		текТаблицаОплат.Вставить("Безналичными", СуммаЧека);
	иначе
		текТаблицаОплат.Вставить("Наличными", СуммаЧека);
	конецЕсли;
			
	всеПараметрыЧека.Вставить("Позиции", Новый Массив);
	текТаблицаПозиций = всеПараметрыЧека.Позиции;
	для Каждого стрПозиции из Объект.Товары цикл
		текТаблицаПозиций.Добавить(Новый Структура);
		текДобПозиция = текТаблицаПозиций.Получить(текТаблицаПозиций.Количество() - 1);
		текДобПозиция.Вставить("Наименование", СокрЛП(стрПозиции.Услуга));
		текДобПозиция.Вставить("Цена", стрПозиции.Цена);
		текДобПозиция.Вставить("Количество", стрПозиции.Количество);
		текДобПозиция.Вставить("Сумма", стрПозиции.Сумма);
		текДобПозиция.Вставить("СтавкаНДС", стрПозиции.СтавкаНДС);
		текДобПозиция.Вставить("ПредметРасчета", стрПозиции.ПризнакПредметаРасчета);
		текДобПозиция.Вставить("СпособРасчета", стрПозиции.ПризнакиСпособаРасчета);
		текДобПозиция.Вставить("Договор", стрПозиции.Договор);
		текДобПозиция.Вставить("ИННПоставщика", стрПозиции.ИННПоставщика);
	конецЦикла;		
	возврат всеПараметрыЧека;
КонецФункции //СформироватьПараметрыЧекаПечати		
	
&НаКлиенте
Процедура КомандаПредпросмотрЧека(Команда)
	печФормаЧека = Новый ТабличныйДокумент;
	всеПараметрыЧека = СформироватьПараметрыЧекаПечати();
	Печать(печФормаЧека, всеПараметрыЧека);
	печФормаЧека.Показать("Просмотр чека");													
КонецПроцедуры //КомандаПредпросмотрЧека

&НаСервере
процедура Печать(печФормаЧека, всеПараметрыЧека) экспорт
	Обработка =  РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("МакетЧека"); 	
	//макет = ПолучитьОбщийМакет();
	областьШапкаЧека = макет.ПолучитьОбласть("шапкаЧека");
	областьзаголовокТаблицы = макет.ПолучитьОбласть("заголовокТаблицыЧека");
	областьСтрокаТовара = макет.ПолучитьОбласть("СтрокаТовара");
	областьпустаяСтрока = макет.ПолучитьОбласть("пустаяСтрока");
	областьИтого = макет.ПолучитьОбласть("итого");
	областьстрокаТипаОплаты = макет.ПолучитьОбласть("строкаТипОплаты");
	областьндсИтого = макет.ПолучитьОбласть("ндсИтого");
	областьПодвал = макет.ПолучитьОбласть("подвал");
	областТекстQRКода = макет.ПолучитьОбласть("ТекстQRКода");
	областьqrкод = макет.ПолучитьОбласть("qrcode");
	
	областьШапкаЧека.Параметры.НомерЧека = СокрЛП(всеПараметрыЧека.НомерЧека);
	областьШапкаЧека.Параметры.ТипЧека = СокрЛП(всеПараметрыЧека.ТипЧека);
	областьШапкаЧека.Параметры.ДатаИВремя = СокрЛП(всеПараметрыЧека.ДатаИВремяЧека);
	областьШапкаЧека.Параметры.НомерСмены = СокрЛП(всеПараметрыЧека.НомерСмены);
	областьШапкаЧека.Параметры.Кассир = СокрЛП(всеПараметрыЧека.Кассир);
	
	печФормаЧека.Очистить();
	печФормаЧека.Вывести(областьШапкаЧека);
	печФормаЧека.Вывести(областьзаголовокТаблицы);
			
	текНомПоз = 1;
	суммаИтогоЧека = 0;
	Для Каждого поз из всеПараметрыЧека.Позиции цикл
		Если текНомПоз > 1 тогда
			печФормаЧека.Вывести(областьпустаяСтрока);
		конецЕсли;
		областьСтрокаТовара.Параметры.печНомПоз = текНомПоз;
		областьСтрокаТовара.Параметры.Наименовние = поз.Наименование;
		областьСтрокаТовара.Параметры.ПечЦена = поз.Цена;
		областьСтрокаТовара.Параметры.ПечКол = поз.Количество;
		областьСтрокаТовара.Параметры.ПечСумма = поз.Сумма;
		областьСтрокаТовара.Параметры.печПредмРасч = поз.ПредметРасчета;
		областьСтрокаТовара.Параметры.печСпосРасч = поз.СпособРасчета;
		областьСтрокаТовара.Параметры.ПечСтавкаНДС = поз.СтавкаНДС;
		областьСтрокаТовара.Параметры.печИННПоставщика = поз.ИННПоставщика;
		областьСтрокаТовара.Параметры.ПечПоставщика = поз.Договор;		
		печФормаЧека.Вывести(областьСтрокаТовара);                 
		текНомПоз = текНомПоз + 1;
	конецЦикла;
	
	печФормаЧека.Вывести(областьпустаяСтрока);
	областьИтого.Параметры.ПечИтогоЧека = всеПараметрыЧека.СуммаЧека;
	печФормаЧека.Вывести(областьИтого);
	для Каждого стрОплаты из всеПараметрыЧека.ТаблицаОплат цикл
		областьстрокаТипаОплаты.Параметры.печТипОплаты = стрОплаты.Ключ;
		областьстрокаТипаОплаты.Параметры.печСуммаТипаОплаты = стрОплаты.Значение;
		печФормаЧека.Вывести(областьстрокаТипаОплаты);
	конецЦикла;
		
	//печФормаЧека.Вывести(областьндсИтого);
	печФормаЧека.Вывести(областьпустаяСтрока);
	областьПодвал.Параметры.печНазвФирмы = всеПараметрыЧека.ФирмаНазвание;
	//областьПодвал.Параметры.печИННФирмы  = всеПараметрыЧека.ИННФирмы;
	областьПодвал.Параметры.печСистНалог = "";
	Если всеПараметрыЧека.Свойство("СистемаНалогообложения") тогда
		областьПодвал.Параметры.печСистНалог = всеПараметрыЧека.СистемаНалогообложения;
	конецЕсли;
	областьПодвал.Параметры.печРегНом    = всеПараметрыЧека.РегНомерККТ;
	областьПодвал.Параметры.печНомФН     = всеПараметрыЧека.НомерФН;
	областьПодвал.Параметры.печНомерЧека = всеПараметрыЧека.НомерЧека;
	областьПодвал.Параметры.печФискПриз  = всеПараметрыЧека.ФискалПризнак;
	печФормаЧека.Вывести(областьПодвал);
	//областТекстQRКода.Параметры.печQRКод = всеПараметрыЧека.СтрокаQRКода;
	печФормаЧека.Вывести(областТекстQRКода);
конецПроцедуры //Печать  

&НаСервереБезКонтекста
Функция ПолучитьЦенуНоменклатурыПоВидуЦенНаСервере(СтруктураВыбора)
	// Текущую дату получаем на сервере, используя ТекущаяДатаСеанса, чтобы учесть разницу часовых поясов
	СтруктураВыбора.Вставить("ДатаОбработки", ?(СтруктураВыбора.Свойство("ПериодЦен") И ЗначениеЗаполнено(СтруктураВыбора.ПериодЦен)
												, СтруктураВыбора.ПериодЦен, ТекущаяДатаСеанса()));	
	Возврат ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураВыбора);	
КонецФункции //ПолучитьЦенуНоменклатурыПоВидуЦенНаСервере

&НаСервере
Функция ПолучитьЦенуНоменклатуры(СтруктураВыбора)
	ОтборВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	ВалютаПодбора = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();	
	СтруктураВыбора.Вставить("ВидЦен",			ОтборВидЦен);
	СтруктураВыбора.Вставить("ВалютаДокумента", ВалютаПодбора);	
	СтруктураВыбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	//СтруктураВыбора.Вставить("ПериодЦен", ?(ЦенаВсегдаНаДатуДокумента, ПериодЦен, Дата(1,1,1))); 
	СтруктураВыбора.Вставить("Коэффициент",		1);	
	Возврат ПолучитьЦенуНоменклатурыПоВидуЦенНаСервере(СтруктураВыбора);	
КонецФункции //ПолучитьЦенуНоменклатуры

&НаСервереБезКонтекста
Функция ПолучитьИННСтавкуНДСПоИННПоставщика(ИННПостащика)
	Перем ТекИННПоставщика;
	Перем резСтавкаПоставщика;
	ТекИННПоставщика = СокрЛП(ИННПостащика);
	СтавкаНДС20 = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаНДС0 = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаНДСБезНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	резСтавкаПоставщика = Справочники.СтавкиНДС.ПустаяСсылка();
	ВыборкаСтавок = Справочники.СтавкиНДС.Выбрать();
	Пока ВыборкаСтавок.Следующий() Цикл
		Если (ВыборкаСтавок.Ставка = 20) и НЕ (ВыборкаСтавок.Расчетная) Тогда
			СтавкаНДС20 = ВыборкаСтавок.Ссылка;
		ИначеЕсли (ВыборкаСтавок.Ставка = 0) и НЕ (ВыборкаСтавок.НеОблагается) Тогда     
			СтавкаНДС0 = ВыборкаСтавок.Ссылка;
		КонецЕсли;
		Если ВыборкаСтавок.НеОблагается Тогда
			СтавкаНДСБезНДС = ВыборкаСтавок.Ссылка;
		КонецЕсли;
	КонецЦикла;
	Если ТекИННПоставщика = "7713570937" Тогда
		резСтавкаПоставщика = СтавкаНДС20;
	ИначеЕсли ТекИННПоставщика = "7708510731" Тогда
		резСтавкаПоставщика = СтавкаНДС0;
	ИначеЕсли ТекИННПоставщика = "7704041020" Тогда
		резСтавкаПоставщика = СтавкаНДСБезНДС;
	КонецЕсли;
	//как вариант прописать условие по ИНН: 
	// "7713570937" Тогда 
	//  	= Перечисления.СтавкиНДС.НДС20_120;
	//"7708510731" Тогда  
	//	      = Перечисления.СтавкиНДС.НДС0;
	//     
	//ИначеЕсли  "7704041020" Тогда             = Перечисления.СтавкиНДС.БезНДС;
	//если ничего не нашли, то можно указать выбра	
	Возврат резСтавкаПоставщика;
КонецФункции //ПолучитьИННСтавкуНДСПоИННПоставщика

&НаСервереБезКонтекста
Функция ПолучитьДанныеЧекаДляПозиции(Услуга, БилетыУжеВыписаны)
	
	СтавкаНДС5 = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаНДС5105 = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаНДС20 = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаНДС20120 = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаНДС10 = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаНДС10110 = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаНДС7 = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаНДС7107 = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаНДС0 = Справочники.СтавкиНДС.ПустаяСсылка();
	СтавкаБезНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	
	ВыборкаСтавок = Справочники.СтавкиНДС.Выбрать();
	Пока ВыборкаСтавок.Следующий() Цикл
		Если (ВыборкаСтавок.Ставка = 5) и НЕ (ВыборкаСтавок.Расчетная) Тогда
			СтавкаНДС5 = ВыборкаСтавок.Ссылка;
		ИначеЕсли (ВыборкаСтавок.Ставка = 5) и (ВыборкаСтавок.Расчетная) Тогда     
			СтавкаНДС5105 = ВыборкаСтавок.Ссылка;
		ИначеЕсли (ВыборкаСтавок.Ставка = 7) и НЕ (ВыборкаСтавок.Расчетная) Тогда
			СтавкаНДС7 = ВыборкаСтавок.Ссылка;
		ИначеЕсли (ВыборкаСтавок.Ставка = 7) и (ВыборкаСтавок.Расчетная) Тогда     
			СтавкаНДС7107 = ВыборкаСтавок.Ссылка;
		ИначеЕсли (ВыборкаСтавок.Ставка = 20) и НЕ (ВыборкаСтавок.Расчетная) Тогда
			СтавкаНДС20 = ВыборкаСтавок.Ссылка;
		ИначеЕсли (ВыборкаСтавок.Ставка = 20) и (ВыборкаСтавок.Расчетная) Тогда     
			СтавкаНДС20120 = ВыборкаСтавок.Ссылка;
		ИначеЕсли (ВыборкаСтавок.Ставка = 10) и НЕ (ВыборкаСтавок.Расчетная) Тогда
			СтавкаНДС10 = ВыборкаСтавок.Ссылка;
		ИначеЕсли (ВыборкаСтавок.Ставка = 10) и (ВыборкаСтавок.Расчетная) Тогда     
			СтавкаНДС10110 = ВыборкаСтавок.Ссылка;
		ИначеЕсли ВыборкаСтавок.Ставка = 0 и НЕ ВыборкаСтавок.НеОблагается Тогда
			СтавкаНДС0 = ВыборкаСтавок.Ссылка;
		ИначеЕсли ВыборкаСтавок.Ставка = 0 и ВыборкаСтавок.НеОблагается Тогда
			СтавкаБезНДС = ВыборкаСтавок.Ссылка;
		КонецЕсли;
	КонецЦикла;		
	
	
	ИННПоставщика = "";
	Поставщик = Справочники.Контрагенты.ПустаяСсылка();
	СтавкаНДСПоставщика = Справочники.СтавкиНДС.ПустаяСсылка();
	Если ЗначениеЗаполнено(Услуга.Договор) Тогда		
		ИННПоставщика = Услуга.Договор.Владелец.ИНН;
		Поставщик = Услуга.Договор.Владелец;
		СтавкаНДСПоставщика = ПолучитьИННСтавкуНДСПоИННПоставщика(ИННПоставщика);
	конецЕсли;                                                 
	ДанныеТовараДляЧека = Новый Структура;
	ДанныеТовараДляЧека.Вставить("Договор", Услуга.Договор);
	ДанныеТовараДляЧека.Вставить("ИННПоставщика", ИННПоставщика);
	ДанныеТовараДляЧека.Вставить("СтавкаНДС", СтавкаНДСПоставщика); 
	ДанныеТовараДляЧека.Вставить("ПризнакПредметаРасчета", Услуга.ПризнакПредметаРасчета);
	ДанныеТовараДляЧека.Вставить("ПризнакиСпособаРасчета", Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная);
	Если Услуга.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга Тогда
		ДанныеТовараДляЧека.ПризнакиСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	ИначеЕсли БилетыУжеВыписаны Тогда
		ДанныеТовараДляЧека.ПризнакиСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
	КонецЕсли;	      
	Если НЕ ЗначениеЗаполнено(Услуга.Договор) Тогда
		ДанныеТовараДляЧека.СтавкаНДС = СтавкаНДС5;
		если ДанныеТовараДляЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Платеж Тогда
			ДанныеТовараДляЧека.СтавкаНДС = СтавкаНДС5105;
		конецЕсли;                                 
	конецЕсли;   
	Если ДанныеТовараДляЧека.ПризнакиСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита Тогда
		ДанныеТовараДляЧека.СтавкаНДС = СтавкаБезНДС;
	КонецЕсли;
	Возврат ДанныеТовараДляЧека;
КонецФункции //ПолучитьДанныеДляЧекаДляПозиции

&НаКлиенте
Процедура ТоварыУслугаПриИзменении(Элемент)
	СтруктураВыбора = Новый Структура;              	
	СтруктураВыбора.Вставить("Номенклатура", Элементы.Товары.ТекущиеДанные.Услуга);
	Элементы.Товары.ТекущиеДанные.Договор = "";
	Элементы.Товары.ТекущиеДанные.СтавкаНДС = "";
	ЦенаТовара = ПолучитьЦенуНоменклатуры(СтруктураВыбора);	
	Элементы.Товары.ТекущиеДанные.Цена = ЦенаТовара;
	ПересчетТабличнойЧасти(Элемент, "Цена");                                      
	ДанныДляПозицииТовара = ПолучитьДанныеЧекаДляПозиции(Элементы.Товары.ТекущиеДанные.Услуга, Объект.РеквизитБилетыУжеВыписаны);
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныДляПозицииТовара);
КонецПроцедуры //ТоварыУслугаПриИзменении

&НаКлиенте
Процедура ПересчетТабличнойЧасти(Элемент, СтолбецИзменений = "Цена")
	Элементы.Товары.ТекущиеДанные.Сумма = Элементы.Товары.ТекущиеДанные.Количество * Элементы.Товары.ТекущиеДанные.Цена;
КонецПроцедуры //ТоварыУслугаПриИзменении

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.РеквизитЧекПродажи = Истина;
	
	ЗначенияЗаполнения = РабочееМестоКассираВызовСервера.ПолучитьКассуККМИТерминалПоУмолчанию();
	
	Объект.РеквизитКассир = ПользователиКлиент.ТекущийПользователь();
	Объект.РеквизитФирма = ЗначенияЗаполнения.Организация;
	Объект.РеквизитКассаККМ = ЗначенияЗаполнения.КассаККМ;
	//Объект.РеквизитФискальныйРегистратор = ПолучитьРекизитКассыККМ(ЗначенияЗаполнения.КассаККМ);
	Если ЗначениеЗаполнено(ЗначенияЗаполнения.КассаККМ) тогда
		ПолучитьРекизитКассыККМ(ЗначенияЗаполнения.КассаККМ, Объект.РеквизитФискальныйРегистратор, Объект.РеквизитФирма);
	конецЕсли;
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьРабочееМесто(ЭтаФорма);
	
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();

	РеквизитТипОплаты = "Наличными";	
КонецПроцедуры //ПриОткрытии

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПересчетТабличнойЧасти(Элемент, "Количество");
КонецПроцедуры //ТоварыКоличествоПриИзменении

&НаКлиенте
Процедура ПолеБилетыУжеВыписаныПриИзменении(Элемент)
	//ПолеБилетыУжеВыписаныПриИзмененииНаСервере();
	Для Каждого стр из Объект.Товары Цикл
		ИдентификаторСтроки = стр.ПолучитьИдентификатор();
		Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
		ТоварыУслугаПриИзменении(Элемент);
	конецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКассовуюСменуДляКассыККМ(КассаККМ, КассоваяСмена = "")
	Перем резОКС;
	резОКС = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
 	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтчетОРозничныхПродажах.Ссылка КАК ОКС,
		|	ОтчетОРозничныхПродажах.КассоваяСмена.Ссылка КАК КассоваяСмена
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.КассаККМ.Ссылка = &КассаККМ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетОРозничныхПродажах.Дата УБЫВ";
	запр = Новый Запрос;
	запр.Текст = ТекстЗапроса;
	запр.УстановитьПараметр("КассаККМ", КассаККМ);
	выб = запр.Выполнить().Выгрузить();
	Если выб.Количество() > 0 Тогда
		резОКС = выб[0].ОКС;
	конецЕсли;
	КассоваяСмена  = резОКС.КассоваяСмена;
	Возврат резОКС;
КонецФункции //ПолучитьКассовуюСменуДляКассыККМ

&НаСервере
Функция СоздатьИПровестиДокументЧекВ1С(ОтчетККМ, НомерСменыККТ = "", НомерЧекаККТ = "", ВозвращаемаяСсылкаНаДокументЧекВ1С = "", ОписаниеОшибкиСозданияДокументаЧекВ1С = "")
	
	УстановитьПривилегированныйРежим(ИСТИНА);
		
	Если Объект.РеквизитЧекПродажи тогда
		текЧекККМ = Документы.ЧекККМ.СоздатьДокумент();	
	Иначе
		текЧекККМ = Документы.ЧекККМВозврат.СоздатьДокумент();	
	КонецЕсли;
	
	ТекПольз = Пользователи.ТекущийПользователь();
	текЧекККМ.Автор = ТекПольз;
	
	таблицаТоваровДокументаЧек = текЧекККМ.Запасы;
	ОбщаяСуммаПоПозициям = 0;
	для каждого стр из Объект.Товары Цикл
		стрЧека = таблицаТоваровДокументаЧек.Добавить();
		стрЧека.Номенклатура = стр.Услуга;
		стрЧека.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		стрЧека.Количество = стр.Количество;
		стрЧека.ЕдиницаИзмерения = стр.Услуга.ЕдиницаИзмерения;
		стрЧека.Цена = стр.Цена;
		стрЧека.Сумма = стр.Сумма;
		стрЧека.СтавкаНДС = стр.СтавкаНДС;
		стрЧека.Всего = стр.Сумма;
		стрЧека.ДоговорПлатежногоАгента = стр.Договор;		
		ОбщаяСуммаПоПозициям = ОбщаяСуммаПоПозициям + стр.Сумма;
	конецЦикла;            
	
	Если РеквизитТипОплаты = "Безналичными" Тогда
		стрБезнала = текЧекККМ.БезналичнаяОплата.Добавить();
		стрБезнала.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта;
		стрБезнала.Сумма = ОбщаяСуммаПоПозициям;	
	Иначе
		текЧекККМ.ПолученоНаличными = ОбщаяСуммаПоПозициям;
	конецЕсли;
	
	ВалютаПодбора = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	РозничТипЦены = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	
	текЧекККМ.Дата = ТекущаяДатаСеанса();
	текЧекККМ.АдресЭП = СокрЛП(Объект.РеквизитEmail);
	текЧекККМ.ВалютаДокумента = ВалютаПодбора;
	текЧекККМ.ВидЦен = РозничТипЦены;
	текЧекККМ.КассаККМ = Объект.РеквизитКассаККМ;
	текЧекККМ.КассоваяСмена = ОтчетККМ;
	текЧекККМ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	текЧекККМ.НДСВключатьВСтоимость = ИСТИНА;
	текЧекККМ.Организация = Объект.РеквизитФирма;
	
	try
		текЧекККМ.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	except
	endtry;  
	
	текЧекККМ.СтруктурнаяЕдиница = Объект.РеквизитКассаККМ.СтруктурнаяЕдиница;
	текЧекККМ.СуммаВключаетНДС = ИСТИНА;
	текЧекККМ.СуммаДокумента = ОбщаяСуммаПоПозициям;
	//текЧекККМ.ФормаОплаты = Перечисления.ТипыДенежныхСредств.;   
	Если Объект.РеквизитЧекПродажи тогда
		текЧекККМ.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ЧекККМ;
	Иначе                                                                          
		текЧекККМ.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ЧекККМВозврат;
	КонецЕсли;
	текЧекККМ.Кратность = 1;
	текЧекККМ.Курс = 1;
	текЧекККМ.Ответственный = ТекПольз;
	текЧекККМ.НомерСменыККМ = 0;
	текЧекККМ.НомерЧекаККМ = 1;       
	
	Если ЗначениеЗаполнено(НомерСменыККТ) Тогда
		текЧекККМ.НомерСменыККМ = НомерСменыККТ;
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерЧекаККТ) Тогда
		текЧекККМ.НомерЧекаККМ = НомерЧекаККТ;
	КонецЕсли;	
	
	резЗаписисЧека = ИСТИНА;
	try 
		текЧекККМ.Записать();        
	except   
		ОписаниеОшибкиСозданияДокументаЧекВ1С = "Ошибка записи документа чек: " + СокрЛП(ОписаниеОшибки());	
		резЗаписисЧека = Ложь;
	endtry;
	Если НЕ резЗаписисЧека Тогда           
		УстановитьПривилегированныйРежим(ЛОЖЬ);
		Возврат ЛОЖЬ;
	конецЕсли;
	РезПроведени = Истина;
	try
		//текЧекККМ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		текЧекККМ.Записать(РежимЗаписиДокумента.Проведение);
	except 
		ОписаниеОшибкиСозданияДокументаЧекВ1С = "Ошибка проведения документа чек: " + СокрЛП(ОписаниеОшибки());	
		РезПроведени = Ложь;
	endtry;
	Если НЕ РезПроведени Тогда		       
		УстановитьПривилегированныйРежим(ЛОЖЬ);
		Возврат ЛОЖЬ;
	конецЕсли;	
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);	
	ВозвращаемаяСсылкаНаДокументЧекВ1С = текЧекККМ.Ссылка;
	
	Возврат ИСТИНА;
КонецФункции //СоздатьИПровестиДокументЧекВ1С

&НаСервереБезКонтекста
Функция ПроверитьСтатутСмены(ВозрСсылкаОтчетККМ, КассаККМ, ОписаниеОшибкиПроверкиСтатусаСмены = "")
	// Вставить содержимое обработчика.        
	ЕстьОшибкиПроверки = ЛОЖЬ;
	СообщениеОшибкиПроверки = "";
	КассоваяСмена = "";
	ВозрСсылкаОтчетККМ = ПолучитьКассовуюСменуДляКассыККМ(КассаККМ, КассоваяСмена);
	Если НЕ ЗначениеЗаполнено(ВозрСсылкаОтчетККМ) или НЕ ЗначениеЗаполнено(КассоваяСмена) Тогда   
		ЕстьОшибкиПроверки = ИСТИНА;
		СообщениеОшибкиПроверки = "Кассовая смена ещё не открыта";
	конецЕсли;
	Если ЗначениеЗаполнено(КассоваяСмена) тогда
		Если КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
			ЕстьОшибкиПроверки = ИСТИНА;
			СообщениеОшибкиПроверки = "Кассовая смена ещё не открыта";
		конецЕсли;     
	КонецЕсли;
	Если ЕстьОшибкиПроверки Тогда
		ОписаниеОшибкиПроверкиСтатусаСмены = СообщениеОшибкиПроверки;
		Возврат ЛОЖЬ;
	конецЕсли;                                                                                             
	Возврат ИСТИНА;
КонецФункции //КомандаПечатьЧекаНаККТНаСервере

&НаКлиенте
Процедура КомандаПечатьЧекаНаККТ(Команда)    	
	ОтчетККМ = "";
	ОписаниеОшибкиОтркытияСмены = "";
	резПроверкиОткрытияСмены = ПроверитьСтатутСмены(ОтчетККМ, Объект.РеквизитКассаККМ, ОписаниеОшибкиОтркытияСмены);
	Если НЕ резПроверкиОткрытияСмены Тогда
		//Сообщить(ОписаниеОшибкиОтркытияСмены);		
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			ОписаниеОшибкиОтркытияСмены);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);		
		
		Возврат; //смена не открыта
	конецЕсли;                            
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтчетККМ", ОтчетККМ);                                           
	ОповещениеПослеЗаврешенияПечатиЧека = Новый ОписаниеОповещения("ПослеПечатиЧека", ЭтотОбъект, ДополнительныеПараметры);
	
	ПробитьДокументЧекаНаНаККТ(ОповещениеПослеЗаврешенияПечатиЧека);
КонецПроцедуры //КомандаПечатьЧекаНаККТ 

&НаКлиенте
Процедура ПробитьДокументЧекаНаНаККТ(ОповещениеПослеЗаврешенияПечатиЧека)		 	
	
	ФискальныйРегистратор = Объект.РеквизитФискальныйРегистратор;	
	ИдентификаторУстройстваФР = ?(ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда		
		ЭтотОбъект.Доступность = Ложь;		
		// Готовим данные
		ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧекаКлиентСВызовомСервера();
		//ПоменятьСпособыРасчсетаПредметыРасчетаИСтавкиНДС(ОбщиеПараметры);
		ОбщиеПараметры.ДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбщиеПараметры", ОбщиеПараметры);
		ДополнительныеПараметры.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЛОЖЬ);
		ДополнительныеПараметры.Вставить("ТранспортныйМодуль", Неопределено);
		ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
		ДополнительныеПараметры.Вставить("АдресТорговогоОбъекта", ОбщиеПараметры.АдресМагазина);
		ДополнительныеПараметры.Вставить("ОповещениеПослеЗаврешенияПечатиЧека", ОповещениеПослеЗаврешенияПечатиЧека);
		
		
		Оповещение            = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОповещениеПослеОткрытииЧека   = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, ДополнительныеПараметры);
		ОповещениеПриОшибкеПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, ДополнительныеПараметры);
		
		ДополнительныеПараметрыОперации = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации();
		ДополнительныеПараметрыОперации.Вставить("ОповещениеПослеОткрытииЧека", ОповещениеПослеОткрытииЧека);
		ДополнительныеПараметрыОперации.Вставить("ОповещениеПриОшибкеПечатиЧека", ОповещениеПриОшибкеПечатиЧека);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор, 
			ДополнительныеПараметры.ИдентификаторУстройстваФР,
			ДополнительныеПараметры.ОбщиеПараметры,
			ДополнительныеПараметрыОперации);
		
		//ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКодМаркировкиСредствамиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		//РозничныеПродажиКлиент.ПроверитьКодМаркировкиСредствамиККТ(ОбщиеПараметры, ЭтотОбъект, НСтр("ru = 'Пробить чек'"), ОповещениеОЗавершении);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
		результатПечатиЧека = Новый Структура;
		результатПечатиЧека.Вставить("Результат", ЛОЖЬ);
		результатПечатиЧека.Вставить("ОписаниеОшибки", ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеПослеЗаврешенияПечатиЧека, результатПечатиЧека);
	КонецЕсли;
КонецПроцедуры // ПробитьДокументЧекаНаНаККТ()    

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеНоменклатуры(НоменклатураСсылка, Характеристика)
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НоменклатураСсылка, "НаименованиеПолное,ТипНоменклатуры,ЭтоНабор,ВидМаркировки,АлкогольнаяПродукция,ПодакцизныйТовар, ВидПродукцииИС, ВидМаркировки, 
			|КодМедицинскогоИзделия, ПризнакПредметаРасчета, ПродаетсяВРозлив");
	Если ЗначениеЗаполнено(Характеристика) Тогда
		НаименованиеХарактеристикиДляПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика, "НаименованиеДляПечати");
		НаименованиеТовара = РеквизитыНоменклатуры.НаименованиеПолное + " (" + НаименованиеХарактеристикиДляПечати + ")";
	Иначе
		НаименованиеТовара = РеквизитыНоменклатуры.НаименованиеПолное;
	КонецЕсли;		
	Возврат НаименованиеТовара;
КонецФункции //ПолучитьРеквизитыНоменклатуры

&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДСЧислом(СтавкаНДС, ПредметРасчета, СпособРасчета)
	Перем СтавкаНДСЧисло;             
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		Возврат Неопределено;
	конецЕсли;
	СтавкаНДСЧисло = СтавкаНДС.Ставка;
	ЭтоАванс = ЛОЖЬ;
	Если ПредметРасчета = Перечисления.ПризнакиПредметаРасчета.Платеж тогда
		ЭтоАванс = ИСТИНА;
	конецЕсли;                                                                                  
	Если НЕ (СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита) тогда
		СтавкаНДСЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(СтавкаНДС, ЭтоАванс);
	иначе                          
		СтавкаНДСЧисло = Неопределено;
	конецЕсли;	      
	Возврат СтавкаНДСЧисло;
КонецФункции //ПолучитьСтавкуНДСЧислом

&НаКлиенте
Функция ЗаполниьПозицииЧека(ОбщиеПараметры)
	Перем СуммаЧекаВозр;
	СуммаЧекаВозр = 0;
	для каждого СтрокаТЧ из Объект.Товары Цикл
		НаименованиеТовара = ПолучитьНаименованиеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика);
		
		СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		СтрокаПозицииЧека.ФискальнаяСтрока = Истина;
		СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
		СтрокаПозицииЧека.Наименование = НаименованиеТовара;
		СтрокаПозицииЧека.Количество = СтрокаТЧ.Количество;
		СтрокаПозицииЧека.Цена = СтрокаТЧ.Цена;
		СтрокаПозицииЧека.Сумма = СтрокаТЧ.Сумма;        
		// Число,Обязательно   - Ставка НДС (Значения: Неопределено-БезНДС, 0, 5, 7, 10, 20, 18, 105, 107, 110, 118, 120)
		ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС, СтрокаТЧ.ПризнакПредметаРасчета, СтрокаТЧ.ПризнакиСпособаРасчета);
		
		//СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = СтрокаТЧ.;
		СтрокаПозицииЧека.ПризнакСпособаРасчета = СтрокаТЧ.ПризнакПредметаРасчета;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = СтрокаТЧ.ПризнакиСпособаРасчета;
		Если ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
			СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = 6; //агнент
			СтрокаПозицииЧека.ДанныеПоставщика.Наименование = СтрокаТЧ.Договор.Владелец.НаименованиеПолное;
			СтрокаПозицииЧека.ДанныеПоставщика.ИНН = СтрокаТЧ.Договор.Владелец.ИНН;
		КонецЕсли;		
		//СтрокаПозицииЧека.ДанныеАгента = ;		
		СтрокаПозицииЧека.ЕдиницаИзмерения = 0;
		СтрокаПозицииЧека.Вставить("РезультатРаспределенияШтрихкодов");
		
		СуммаЧекаВозр = СуммаЧекаВозр + СтрокаТЧ.Сумма;
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	Возврат СуммаЧекаВозр;
КонецФункции //ЗаполниьПозицииЧека

&НаКлиенте
Процедура ЗаполнитьОплаты(ОбщиеПараметры, СуммаЧека)
	СтрокаОплаты = Новый Структура;
	СтрокаОплаты.Вставить("Сумма", СуммаЧека);
	Если РеквизитТипОплаты = "Наличными" Тогда  		
		СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = '2 - наличными  через ККМ'"));		
	иначе
		СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисления.ТипыОплатыККТ.Электронно"));
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = '30 - по кредитной карте'"));
	конецЕсли;
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);					
КонецПроцедуры //ЗаполнитьОплаты

&НаКлиенте
функция ПодготовитьДанныеДляПробитияЧекаКлиентСВызовомСервера()
	ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ОбщиеПараметры.Вставить("ЭтоРассрочка", ЛОЖЬ);			
	
	ОбщиеПараметры.Организация = Объект.РеквизитФирма; 
	ОбщиеПараметры.КассаККМ = Объект.РеквизитКассаККМ;
	ОбщиеПараметры.Вставить("Автор", Объект.РеквизитКассир);
	ОбщиеПараметры.Вставить("ЭтоВозврат", НЕ Объект.РеквизитЧекПродажи);
	
	Если ЗначениеЗаполнено(Объект.РеквизитEmail) тогда
		ОбщиеПараметры.ПокупательEmail = Объект.РеквизитEmail;
	КонецЕсли;
		
	//ПодготовитьДанныеДляПробитияЧекаСервер(ОбщиеПараметры, ТаблицаТоваровЧека);
	ПодготовитьДанныеДляПробитияЧекаСервер(ОбщиеПараметры);
	СуммаЧекаПоПозициям = ЗаполниьПозицииЧека(ОбщиеПараметры);  
	ЗаполнитьОплаты(ОбщиеПараметры, СуммаЧекаПоПозициям);
	
	Возврат ОбщиеПараметры;
конецФункции //ПодготовитьДанныеДляПробитияЧекаКлиентСВызовомСервера

&НаСервереБезКонтекста
Процедура УстановитьШаблонЧека(ОбщиеПараметры, РеквизитыКассыККМ, ЭтоВозврат)
	
	Если ОбщиеПараметры.Свойство("ШаблонЧека") И Не ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека) Тогда
		Если ЭтоВозврат Тогда
			Если ЗначениеЗаполнено(РеквизитыКассыККМ.ШаблонЧекаВозврата) Тогда
				ОбщиеПараметры.ШаблонЧека = РеквизитыКассыККМ.ШаблонЧекаВозврата;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(РеквизитыКассыККМ.ШаблонЧекаПродажи) Тогда
				ОбщиеПараметры.ШаблонЧека = РеквизитыКассыККМ.ШаблонЧекаПродажи;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //УстановитьШаблонЧека

&НаСервереБезКонтекста
Функция ПодготовитьДанныеДляПробитияЧекаСервер(ОбщиеПараметры)	
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбщиеПараметры.Организация, "НаименованиеПолное,ИНН,КПП");
	
	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С,ЭлектронныйЧекEmailПередаютсяПрограммой1С,СерийныйНомер,Код,ПодключаемоеОборудование,СтруктурнаяЕдиница");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	СтруктураРеквизитов.Вставить("ИсточникФИОКассираВЧеке");
	СтруктураРеквизитов.Вставить("ШаблонЧекаПродажи");
	СтруктураРеквизитов.Вставить("ШаблонЧекаВозврата");
	СтруктураРеквизитов.Вставить("НеПечататьБумажныйЧек");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбщиеПараметры.КассаККМ, СтруктураРеквизитов);
	
	//ПользовательКассирДляПечати = Справочники.КассыККМ.ПолучитьПользователяКассираДляПечатиЧека(ДокументОбъект, РеквизитыКассыККМ.ИсточникФИОКассираВЧеке);
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(ОбщиеПараметры.Автор);
	
	ОбщиеПараметры.ТипРасчета = ?(ОбщиеПараметры.ЭтоВозврат,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
		
	ОбщиеПараметры.Электронно = РеквизитыКассыККМ.НеПечататьБумажныйЧек;
	
	//ОбщиеПараметры.ДокументОснование = ДокументСсылка;
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыКассыККМ.СтруктурнаяЕдиница;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир          = РеквизитыКассира.ИмяКассираИДолжность;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН       = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека  = "1";
	ОбщиеПараметры.НомерСмены = "1";
	
	СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ОбщиеПараметры.Организация, ТекущаяДатаСеанса());
	АдресМагазина = ПечатьДокументовУНФ.КонтактнаяИнформация(РеквизитыКассыККМ.СтруктурнаяЕдиница, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
		
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(РеквизитыКассыККМ.СтруктурнаяЕдиница);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		ОбщиеПараметры.Организация,
		РеквизитыКассыККМ.СтруктурнаяЕдиница,
		ТекущаяДатаСеанса(),
		Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется);
		
	УстановитьШаблонЧека(ОбщиеПараметры, РеквизитыКассыККМ, ОбщиеПараметры.ЭтоВозврат);
		
	ЭтоТипПлатежнойСистемыККТСБП  = Ложь;
	ЭтоТипПлатежнойСистемыККТНСПК = Ложь;
	Если ОбщиеПараметры.Свойство("ТипПлатежнойСистемы") Тогда
		ЭтоТипПлатежнойСистемыККТСБП  =
			ОбщиеПараметры.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей;
		ЭтоТипПлатежнойСистемыККТНСПК =
			ОбщиеПараметры.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СертификатНСПК;
	КонецЕсли;
	
	Если ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств 
		И (ЭтоТипПлатежнойСистемыККТСБП ИЛИ ЭтоТипПлатежнойСистемыККТНСПК) 
		И ОбщиеПараметры.Свойство("QRКод") Тогда
		
		ЕстьШаблонЧекаПродажи = ОбщиеПараметры.Свойство("ШаблонЧека") 
			И ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека);
		НеПечататьКодВозвратаСБП  = Ложь;
		НеПечататьКодВозвратаНСПК = Ложь;
		Если НЕ ЕстьШаблонЧекаПродажи Тогда 
			//УстановитьНастройкиКодаВозврата(НеПечататьКодВозвратаСБП,НеПечататьКодВозвратаНСПК);
			//НеПечататьКодВозвратаСБП = ЭтоТипПлатежнойСистемыККТСБП И НеПечататьКодВозвратаСБП;
			//НеПечататьКодВозвратаНСПК = ЭтоТипПлатежнойСистемыККТНСПК И НеПечататьКодВозвратаНСПК; 
			НеПечататьКодВозвратаСБП = Ложь;
			НеПечататьКодВозвратаНСПК = Ложь; 			
		КонецЕсли;
		Если ЕстьШаблонЧекаПродажи ИЛИ НеПечататьКодВозвратаСБП ИЛИ НеПечататьКодВозвратаНСПК Тогда
			ОбщиеПараметры.QRКод.ЗначениеКода = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщиеПараметры;
КонецФункции //ПодготовитьДанныеДляПробитияЧекаСервер

&НаКлиенте
Процедура ОчиститьФормуДляСледующегоЧека()     
	Объект.РеквизитEmail = "";
	Объект.РеквизитБилетыУжеВыписаны = ЛОЖЬ;
	Объект.РеквизитЧекПродажи = Истина;
	Объект.Товары.Очистить();
	РеквизитТипОплаты = "Наличными";
	ЭтаФорма.Элементы.ПолеЧекПродажи.Заголовок = "ПРИХОД";
КонецПроцедуры //ОчиститьФормуДляСледующегоЧека

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
КонецПроцедуры //ПечатьЧека_ПослеОткрытияЧека

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	Попытка
		ШапкаЧека.НомерЧекаККТ = ШапкаЧека.НомерЧека + 1000000;
	Исключение
		ШапкаЧека.НомерЧекаККТ = 1000000;
	КонецПопытки;
	
	Если ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;	
КонецПроцедуры //ПечатьЧека_ПослеОшибкиПечатиЧека

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт	
	ЭтотОбъект.Доступность = Истина;	
	Если РезультатВыполнения.Результат Тогда		
		Если РезультатВыполнения.Свойство("РезультатОперации") Тогда
			Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Параметры);
			ОборудованиеЧекопечатающиеОблачныеККТКлиент.ПроверитьСтатусЧека(Оповещение, УникальныйИдентификатор, Параметры.ИдентификаторУстройстваФР, Параметры.ОбщиеПараметры, РезультатВыполнения.РезультатОперации);
		Иначе			       
			результатПечатиЧека = Новый Структура;
			результатПечатиЧека.Вставить("Результат", ИСТИНА);
			результатПечатиЧека.Вставить("НомерСменыККТ", РезультатВыполнения.НомерСменыККТ);
			результатПечатиЧека.Вставить("НомерЧекаККТ", РезультатВыполнения.НомерЧекаККТ);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеЗаврешенияПечатиЧека, результатПечатиЧека);							
		КонецЕсли;		
	Иначе
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);		
		
		результатПечатиЧека = Новый Структура;
		результатПечатиЧека.Вставить("Результат", ЛОЖЬ);
		результатПечатиЧека.Вставить("ОписаниеОшибки", ТекстСообщения);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеЗаврешенияПечатиЧека, результатПечатиЧека);				
	КонецЕсли;	
КонецПроцедуры //ПробитьЧекЗавершение

&НаКлиенте
Процедура ПослеПечатиЧека(ДанныеПечатиЧека, ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(ДанныеПечатиЧека) Тогда
		ТекстСообщения = "Ошибка печати чека";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;		
	конецЕсли;
	Если НЕ ДанныеПечатиЧека.Результат Тогда     
		ТекстСообщения = "Ошибка печати чека: " + СокрЛП(ДанныеПечатиЧека.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	конецЕсли;         
	
	СсылкаНаДокументЧек = "";
	ОписаниеОшибкиПриСозданииДокументаЧекВ1С = "";
	РезультатСозданияДокументаЧекВ1С = СоздатьИПровестиДокументЧекВ1С(ДопПараметры.ОтчетККМ, ДанныеПечатиЧека.НомерСменыККТ, ДанныеПечатиЧека.НомерЧекаККТ, СсылкаНаДокументЧек, ОписаниеОшибкиПриСозданииДокументаЧекВ1С);	

	Если НЕ РезультатСозданияДокументаЧекВ1С Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибкиПриСозданииДокументаЧекВ1С);
	конецЕсли;	    	
	ОчиститьФормуДляСледующегоЧека();
КонецПроцедуры //ПослеПечатиЧека 

&НаСервереБезКонтекста
Функция ПолучитьРекизитКассыККМ(СсылкаНаКассуККМ, ПодключаемоеОборудование, Организация)
	ПодключаемоеОборудование = СсылкаНаКассуККМ.ПодключаемоеОборудование;  
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) тогда
		Организация = ПодключаемоеОборудование.Организация;
	КонецЕсли;
КонецФункции //ПолучитьРекизитКассыККМ

&НаКлиенте
Процедура ПолеКассаККМПриИзменении(Элемент)
	ПолучитьРекизитКассыККМ(Объект.РеквизитКассаККМ, Объект.РеквизитФискальныйРегистратор, Объект.РеквизитФирма);
КонецПроцедуры //ПолеКассаККМПриИзменении

